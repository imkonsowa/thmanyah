// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/cms.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Category with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Category) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Category with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CategoryMultiError, or nil
// if none found.
func (m *Category) ValidateAll() error {
	return m.validate(true)
}

func (m *Category) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CategoryValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CategoryValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CategoryValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CategoryValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CategoryValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CategoryValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CategoryValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatedBy

	// no validation rules for Metadata

	if len(errors) > 0 {
		return CategoryMultiError(errors)
	}

	return nil
}

// CategoryMultiError is an error wrapping multiple validation errors returned
// by Category.ValidateAll() if the designated constraints aren't met.
type CategoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryMultiError) AllErrors() []error { return m }

// CategoryValidationError is the validation error returned by
// Category.Validate if the designated constraints aren't met.
type CategoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryValidationError) ErrorName() string { return "CategoryValidationError" }

// Error satisfies the builtin error interface
func (e CategoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryValidationError{}

// Validate checks the field values on Program with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Program) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Program with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ProgramMultiError, or nil if none found.
func (m *Program) ValidateAll() error {
	return m.validate(true)
}

func (m *Program) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetTitle()) < 1 {
		err := ProgramValidationError{
			field:  "Title",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	if utf8.RuneCountInString(m.GetCategoryId()) < 1 {
		err := ProgramValidationError{
			field:  "CategoryId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProgramValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProgramValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProgramValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProgramValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProgramValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProgramValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPublishedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProgramValidationError{
					field:  "PublishedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProgramValidationError{
					field:  "PublishedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPublishedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProgramValidationError{
				field:  "PublishedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatedBy

	// no validation rules for UpdatedBy

	// no validation rules for ThumbnailUrl

	// no validation rules for Metadata

	// no validation rules for EpisodesCount

	// no validation rules for IsFeatured

	// no validation rules for ViewCount

	// no validation rules for Rating

	if m.SourceUrl != nil {
		// no validation rules for SourceUrl
	}

	if len(errors) > 0 {
		return ProgramMultiError(errors)
	}

	return nil
}

// ProgramMultiError is an error wrapping multiple validation errors returned
// by Program.ValidateAll() if the designated constraints aren't met.
type ProgramMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProgramMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProgramMultiError) AllErrors() []error { return m }

// ProgramValidationError is the validation error returned by Program.Validate
// if the designated constraints aren't met.
type ProgramValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProgramValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProgramValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProgramValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProgramValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProgramValidationError) ErrorName() string { return "ProgramValidationError" }

// Error satisfies the builtin error interface
func (e ProgramValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProgram.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProgramValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProgramValidationError{}

// Validate checks the field values on Episode with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Episode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Episode with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EpisodeMultiError, or nil if none found.
func (m *Episode) ValidateAll() error {
	return m.validate(true)
}

func (m *Episode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetProgramId()) < 1 {
		err := EpisodeValidationError{
			field:  "ProgramId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTitle()) < 1 {
		err := EpisodeValidationError{
			field:  "Title",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	if m.GetDurationSeconds() < 0 {
		err := EpisodeValidationError{
			field:  "DurationSeconds",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetEpisodeNumber() < 1 {
		err := EpisodeValidationError{
			field:  "EpisodeNumber",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSeasonNumber() < 1 {
		err := EpisodeValidationError{
			field:  "SeasonNumber",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EpisodeValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EpisodeValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EpisodeValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EpisodeValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EpisodeValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EpisodeValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPublishedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EpisodeValidationError{
					field:  "PublishedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EpisodeValidationError{
					field:  "PublishedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPublishedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EpisodeValidationError{
				field:  "PublishedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetScheduledAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EpisodeValidationError{
					field:  "ScheduledAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EpisodeValidationError{
					field:  "ScheduledAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScheduledAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EpisodeValidationError{
				field:  "ScheduledAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatedBy

	// no validation rules for UpdatedBy

	// no validation rules for MediaUrl

	// no validation rules for ThumbnailUrl

	// no validation rules for Metadata

	// no validation rules for ViewCount

	// no validation rules for Rating

	if len(errors) > 0 {
		return EpisodeMultiError(errors)
	}

	return nil
}

// EpisodeMultiError is an error wrapping multiple validation errors returned
// by Episode.ValidateAll() if the designated constraints aren't met.
type EpisodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EpisodeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EpisodeMultiError) AllErrors() []error { return m }

// EpisodeValidationError is the validation error returned by Episode.Validate
// if the designated constraints aren't met.
type EpisodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EpisodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EpisodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EpisodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EpisodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EpisodeValidationError) ErrorName() string { return "EpisodeValidationError" }

// Error satisfies the builtin error interface
func (e EpisodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEpisode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EpisodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EpisodeValidationError{}

// Validate checks the field values on CreateProgramRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProgramRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProgramRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProgramRequestMultiError, or nil if none found.
func (m *CreateProgramRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProgramRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetTitle()) < 1 {
		err := CreateProgramRequestValidationError{
			field:  "Title",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	if utf8.RuneCountInString(m.GetCategoryId()) < 1 {
		err := CreateProgramRequestValidationError{
			field:  "CategoryId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ThumbnailUrl

	// no validation rules for Metadata

	// no validation rules for SourceUrl

	// no validation rules for IsFeatured

	if len(errors) > 0 {
		return CreateProgramRequestMultiError(errors)
	}

	return nil
}

// CreateProgramRequestMultiError is an error wrapping multiple validation
// errors returned by CreateProgramRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateProgramRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProgramRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProgramRequestMultiError) AllErrors() []error { return m }

// CreateProgramRequestValidationError is the validation error returned by
// CreateProgramRequest.Validate if the designated constraints aren't met.
type CreateProgramRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProgramRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProgramRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProgramRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProgramRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProgramRequestValidationError) ErrorName() string {
	return "CreateProgramRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProgramRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProgramRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProgramRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProgramRequestValidationError{}

// Validate checks the field values on CreateProgramResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProgramResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProgramResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProgramResponseMultiError, or nil if none found.
func (m *CreateProgramResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProgramResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProgram()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateProgramResponseValidationError{
					field:  "Program",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateProgramResponseValidationError{
					field:  "Program",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProgram()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateProgramResponseValidationError{
				field:  "Program",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateProgramResponseMultiError(errors)
	}

	return nil
}

// CreateProgramResponseMultiError is an error wrapping multiple validation
// errors returned by CreateProgramResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateProgramResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProgramResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProgramResponseMultiError) AllErrors() []error { return m }

// CreateProgramResponseValidationError is the validation error returned by
// CreateProgramResponse.Validate if the designated constraints aren't met.
type CreateProgramResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProgramResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProgramResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProgramResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProgramResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProgramResponseValidationError) ErrorName() string {
	return "CreateProgramResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProgramResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProgramResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProgramResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProgramResponseValidationError{}

// Validate checks the field values on UpdateProgramRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProgramRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProgramRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProgramRequestMultiError, or nil if none found.
func (m *UpdateProgramRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProgramRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetProgramId()) < 1 {
		err := UpdateProgramRequestValidationError{
			field:  "ProgramId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Metadata

	if m.Title != nil {
		// no validation rules for Title
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.CategoryId != nil {
		// no validation rules for CategoryId
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.ThumbnailUrl != nil {
		// no validation rules for ThumbnailUrl
	}

	if m.SourceUrl != nil {
		// no validation rules for SourceUrl
	}

	if m.IsFeatured != nil {
		// no validation rules for IsFeatured
	}

	if len(errors) > 0 {
		return UpdateProgramRequestMultiError(errors)
	}

	return nil
}

// UpdateProgramRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateProgramRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateProgramRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProgramRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProgramRequestMultiError) AllErrors() []error { return m }

// UpdateProgramRequestValidationError is the validation error returned by
// UpdateProgramRequest.Validate if the designated constraints aren't met.
type UpdateProgramRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProgramRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProgramRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProgramRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProgramRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProgramRequestValidationError) ErrorName() string {
	return "UpdateProgramRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProgramRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProgramRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProgramRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProgramRequestValidationError{}

// Validate checks the field values on UpdateProgramResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProgramResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProgramResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProgramResponseMultiError, or nil if none found.
func (m *UpdateProgramResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProgramResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProgram()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateProgramResponseValidationError{
					field:  "Program",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateProgramResponseValidationError{
					field:  "Program",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProgram()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProgramResponseValidationError{
				field:  "Program",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateProgramResponseMultiError(errors)
	}

	return nil
}

// UpdateProgramResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateProgramResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateProgramResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProgramResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProgramResponseMultiError) AllErrors() []error { return m }

// UpdateProgramResponseValidationError is the validation error returned by
// UpdateProgramResponse.Validate if the designated constraints aren't met.
type UpdateProgramResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProgramResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProgramResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProgramResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProgramResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProgramResponseValidationError) ErrorName() string {
	return "UpdateProgramResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProgramResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProgramResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProgramResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProgramResponseValidationError{}

// Validate checks the field values on DeleteProgramRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProgramRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProgramRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProgramRequestMultiError, or nil if none found.
func (m *DeleteProgramRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProgramRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetProgramId()) < 1 {
		err := DeleteProgramRequestValidationError{
			field:  "ProgramId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteProgramRequestMultiError(errors)
	}

	return nil
}

// DeleteProgramRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteProgramRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteProgramRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProgramRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProgramRequestMultiError) AllErrors() []error { return m }

// DeleteProgramRequestValidationError is the validation error returned by
// DeleteProgramRequest.Validate if the designated constraints aren't met.
type DeleteProgramRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProgramRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProgramRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProgramRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProgramRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProgramRequestValidationError) ErrorName() string {
	return "DeleteProgramRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProgramRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProgramRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProgramRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProgramRequestValidationError{}

// Validate checks the field values on GetProgramRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetProgramRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProgramRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProgramRequestMultiError, or nil if none found.
func (m *GetProgramRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProgramRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetProgramId()) < 1 {
		err := GetProgramRequestValidationError{
			field:  "ProgramId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetProgramRequestMultiError(errors)
	}

	return nil
}

// GetProgramRequestMultiError is an error wrapping multiple validation errors
// returned by GetProgramRequest.ValidateAll() if the designated constraints
// aren't met.
type GetProgramRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProgramRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProgramRequestMultiError) AllErrors() []error { return m }

// GetProgramRequestValidationError is the validation error returned by
// GetProgramRequest.Validate if the designated constraints aren't met.
type GetProgramRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProgramRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProgramRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProgramRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProgramRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProgramRequestValidationError) ErrorName() string {
	return "GetProgramRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProgramRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProgramRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProgramRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProgramRequestValidationError{}

// Validate checks the field values on GetProgramResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProgramResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProgramResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProgramResponseMultiError, or nil if none found.
func (m *GetProgramResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProgramResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProgram()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProgramResponseValidationError{
					field:  "Program",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProgramResponseValidationError{
					field:  "Program",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProgram()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProgramResponseValidationError{
				field:  "Program",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetProgramResponseMultiError(errors)
	}

	return nil
}

// GetProgramResponseMultiError is an error wrapping multiple validation errors
// returned by GetProgramResponse.ValidateAll() if the designated constraints
// aren't met.
type GetProgramResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProgramResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProgramResponseMultiError) AllErrors() []error { return m }

// GetProgramResponseValidationError is the validation error returned by
// GetProgramResponse.Validate if the designated constraints aren't met.
type GetProgramResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProgramResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProgramResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProgramResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProgramResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProgramResponseValidationError) ErrorName() string {
	return "GetProgramResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProgramResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProgramResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProgramResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProgramResponseValidationError{}

// Validate checks the field values on ListProgramsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProgramsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProgramsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProgramsRequestMultiError, or nil if none found.
func (m *ListProgramsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProgramsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	if m.GetPageSize() > 100 {
		err := ListProgramsRequestValidationError{
			field:  "PageSize",
			reason: "value must be less than or equal to 100",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CategoryId

	// no validation rules for Status

	// no validation rules for SearchQuery

	// no validation rules for SortBy

	// no validation rules for SortOrder

	// no validation rules for FeaturedOnly

	if len(errors) > 0 {
		return ListProgramsRequestMultiError(errors)
	}

	return nil
}

// ListProgramsRequestMultiError is an error wrapping multiple validation
// errors returned by ListProgramsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListProgramsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProgramsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProgramsRequestMultiError) AllErrors() []error { return m }

// ListProgramsRequestValidationError is the validation error returned by
// ListProgramsRequest.Validate if the designated constraints aren't met.
type ListProgramsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProgramsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProgramsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProgramsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProgramsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProgramsRequestValidationError) ErrorName() string {
	return "ListProgramsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProgramsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProgramsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProgramsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProgramsRequestValidationError{}

// Validate checks the field values on ListProgramsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProgramsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProgramsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProgramsResponseMultiError, or nil if none found.
func (m *ListProgramsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProgramsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPrograms() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProgramsResponseValidationError{
						field:  fmt.Sprintf("Programs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProgramsResponseValidationError{
						field:  fmt.Sprintf("Programs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProgramsResponseValidationError{
					field:  fmt.Sprintf("Programs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalCount

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListProgramsResponseMultiError(errors)
	}

	return nil
}

// ListProgramsResponseMultiError is an error wrapping multiple validation
// errors returned by ListProgramsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListProgramsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProgramsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProgramsResponseMultiError) AllErrors() []error { return m }

// ListProgramsResponseValidationError is the validation error returned by
// ListProgramsResponse.Validate if the designated constraints aren't met.
type ListProgramsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProgramsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProgramsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProgramsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProgramsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProgramsResponseValidationError) ErrorName() string {
	return "ListProgramsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProgramsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProgramsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProgramsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProgramsResponseValidationError{}

// Validate checks the field values on CreateCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCategoryRequestMultiError, or nil if none found.
func (m *CreateCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateCategoryRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	// no validation rules for Type

	// no validation rules for Metadata

	if len(errors) > 0 {
		return CreateCategoryRequestMultiError(errors)
	}

	return nil
}

// CreateCategoryRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCategoryRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCategoryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCategoryRequestMultiError) AllErrors() []error { return m }

// CreateCategoryRequestValidationError is the validation error returned by
// CreateCategoryRequest.Validate if the designated constraints aren't met.
type CreateCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCategoryRequestValidationError) ErrorName() string {
	return "CreateCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCategoryRequestValidationError{}

// Validate checks the field values on CreateCategoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCategoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCategoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCategoryResponseMultiError, or nil if none found.
func (m *CreateCategoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCategoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCategoryResponseValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCategoryResponseValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCategoryResponseValidationError{
				field:  "Category",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCategoryResponseMultiError(errors)
	}

	return nil
}

// CreateCategoryResponseMultiError is an error wrapping multiple validation
// errors returned by CreateCategoryResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateCategoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCategoryResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCategoryResponseMultiError) AllErrors() []error { return m }

// CreateCategoryResponseValidationError is the validation error returned by
// CreateCategoryResponse.Validate if the designated constraints aren't met.
type CreateCategoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCategoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCategoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCategoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCategoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCategoryResponseValidationError) ErrorName() string {
	return "CreateCategoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCategoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCategoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCategoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCategoryResponseValidationError{}

// Validate checks the field values on UpdateCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCategoryRequestMultiError, or nil if none found.
func (m *UpdateCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCategoryId()) < 1 {
		err := UpdateCategoryRequestValidationError{
			field:  "CategoryId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Metadata

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.Type != nil {
		// no validation rules for Type
	}

	if len(errors) > 0 {
		return UpdateCategoryRequestMultiError(errors)
	}

	return nil
}

// UpdateCategoryRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCategoryRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCategoryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCategoryRequestMultiError) AllErrors() []error { return m }

// UpdateCategoryRequestValidationError is the validation error returned by
// UpdateCategoryRequest.Validate if the designated constraints aren't met.
type UpdateCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCategoryRequestValidationError) ErrorName() string {
	return "UpdateCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCategoryRequestValidationError{}

// Validate checks the field values on UpdateCategoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCategoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCategoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCategoryResponseMultiError, or nil if none found.
func (m *UpdateCategoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCategoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCategoryResponseValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCategoryResponseValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCategoryResponseValidationError{
				field:  "Category",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCategoryResponseMultiError(errors)
	}

	return nil
}

// UpdateCategoryResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateCategoryResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateCategoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCategoryResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCategoryResponseMultiError) AllErrors() []error { return m }

// UpdateCategoryResponseValidationError is the validation error returned by
// UpdateCategoryResponse.Validate if the designated constraints aren't met.
type UpdateCategoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCategoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCategoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCategoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCategoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCategoryResponseValidationError) ErrorName() string {
	return "UpdateCategoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCategoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCategoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCategoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCategoryResponseValidationError{}

// Validate checks the field values on DeleteCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCategoryRequestMultiError, or nil if none found.
func (m *DeleteCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCategoryId()) < 1 {
		err := DeleteCategoryRequestValidationError{
			field:  "CategoryId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteCategoryRequestMultiError(errors)
	}

	return nil
}

// DeleteCategoryRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCategoryRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCategoryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCategoryRequestMultiError) AllErrors() []error { return m }

// DeleteCategoryRequestValidationError is the validation error returned by
// DeleteCategoryRequest.Validate if the designated constraints aren't met.
type DeleteCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCategoryRequestValidationError) ErrorName() string {
	return "DeleteCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCategoryRequestValidationError{}

// Validate checks the field values on GetCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCategoryRequestMultiError, or nil if none found.
func (m *GetCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCategoryId()) < 1 {
		err := GetCategoryRequestValidationError{
			field:  "CategoryId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCategoryRequestMultiError(errors)
	}

	return nil
}

// GetCategoryRequestMultiError is an error wrapping multiple validation errors
// returned by GetCategoryRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCategoryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCategoryRequestMultiError) AllErrors() []error { return m }

// GetCategoryRequestValidationError is the validation error returned by
// GetCategoryRequest.Validate if the designated constraints aren't met.
type GetCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCategoryRequestValidationError) ErrorName() string {
	return "GetCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCategoryRequestValidationError{}

// Validate checks the field values on GetCategoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCategoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCategoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCategoryResponseMultiError, or nil if none found.
func (m *GetCategoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCategoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCategoryResponseValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCategoryResponseValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCategoryResponseValidationError{
				field:  "Category",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCategoryResponseMultiError(errors)
	}

	return nil
}

// GetCategoryResponseMultiError is an error wrapping multiple validation
// errors returned by GetCategoryResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCategoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCategoryResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCategoryResponseMultiError) AllErrors() []error { return m }

// GetCategoryResponseValidationError is the validation error returned by
// GetCategoryResponse.Validate if the designated constraints aren't met.
type GetCategoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCategoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCategoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCategoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCategoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCategoryResponseValidationError) ErrorName() string {
	return "GetCategoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCategoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCategoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCategoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCategoryResponseValidationError{}

// Validate checks the field values on ListCategoriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCategoriesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCategoriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCategoriesRequestMultiError, or nil if none found.
func (m *ListCategoriesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCategoriesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	if m.GetPageSize() > 100 {
		err := ListCategoriesRequestValidationError{
			field:  "PageSize",
			reason: "value must be less than or equal to 100",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Type

	// no validation rules for ActiveOnly

	// no validation rules for SearchQuery

	if len(errors) > 0 {
		return ListCategoriesRequestMultiError(errors)
	}

	return nil
}

// ListCategoriesRequestMultiError is an error wrapping multiple validation
// errors returned by ListCategoriesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListCategoriesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCategoriesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCategoriesRequestMultiError) AllErrors() []error { return m }

// ListCategoriesRequestValidationError is the validation error returned by
// ListCategoriesRequest.Validate if the designated constraints aren't met.
type ListCategoriesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCategoriesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCategoriesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCategoriesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCategoriesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCategoriesRequestValidationError) ErrorName() string {
	return "ListCategoriesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCategoriesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCategoriesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCategoriesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCategoriesRequestValidationError{}

// Validate checks the field values on ListCategoriesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCategoriesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCategoriesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCategoriesResponseMultiError, or nil if none found.
func (m *ListCategoriesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCategoriesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCategories() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCategoriesResponseValidationError{
						field:  fmt.Sprintf("Categories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCategoriesResponseValidationError{
						field:  fmt.Sprintf("Categories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCategoriesResponseValidationError{
					field:  fmt.Sprintf("Categories[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalCount

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListCategoriesResponseMultiError(errors)
	}

	return nil
}

// ListCategoriesResponseMultiError is an error wrapping multiple validation
// errors returned by ListCategoriesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListCategoriesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCategoriesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCategoriesResponseMultiError) AllErrors() []error { return m }

// ListCategoriesResponseValidationError is the validation error returned by
// ListCategoriesResponse.Validate if the designated constraints aren't met.
type ListCategoriesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCategoriesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCategoriesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCategoriesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCategoriesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCategoriesResponseValidationError) ErrorName() string {
	return "ListCategoriesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCategoriesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCategoriesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCategoriesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCategoriesResponseValidationError{}

// Validate checks the field values on CreateEpisodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateEpisodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEpisodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateEpisodeRequestMultiError, or nil if none found.
func (m *CreateEpisodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEpisodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetProgramId()) < 1 {
		err := CreateEpisodeRequestValidationError{
			field:  "ProgramId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTitle()) < 1 {
		err := CreateEpisodeRequestValidationError{
			field:  "Title",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	if m.GetDurationSeconds() < 0 {
		err := CreateEpisodeRequestValidationError{
			field:  "DurationSeconds",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetEpisodeNumber() < 1 {
		err := CreateEpisodeRequestValidationError{
			field:  "EpisodeNumber",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSeasonNumber() < 1 {
		err := CreateEpisodeRequestValidationError{
			field:  "SeasonNumber",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for MediaUrl

	// no validation rules for ThumbnailUrl

	// no validation rules for Metadata

	if len(errors) > 0 {
		return CreateEpisodeRequestMultiError(errors)
	}

	return nil
}

// CreateEpisodeRequestMultiError is an error wrapping multiple validation
// errors returned by CreateEpisodeRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateEpisodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEpisodeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEpisodeRequestMultiError) AllErrors() []error { return m }

// CreateEpisodeRequestValidationError is the validation error returned by
// CreateEpisodeRequest.Validate if the designated constraints aren't met.
type CreateEpisodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEpisodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEpisodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEpisodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEpisodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEpisodeRequestValidationError) ErrorName() string {
	return "CreateEpisodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEpisodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEpisodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEpisodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEpisodeRequestValidationError{}

// Validate checks the field values on CreateEpisodeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateEpisodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEpisodeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateEpisodeResponseMultiError, or nil if none found.
func (m *CreateEpisodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEpisodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEpisode()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateEpisodeResponseValidationError{
					field:  "Episode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateEpisodeResponseValidationError{
					field:  "Episode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEpisode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateEpisodeResponseValidationError{
				field:  "Episode",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateEpisodeResponseMultiError(errors)
	}

	return nil
}

// CreateEpisodeResponseMultiError is an error wrapping multiple validation
// errors returned by CreateEpisodeResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateEpisodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEpisodeResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEpisodeResponseMultiError) AllErrors() []error { return m }

// CreateEpisodeResponseValidationError is the validation error returned by
// CreateEpisodeResponse.Validate if the designated constraints aren't met.
type CreateEpisodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEpisodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEpisodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEpisodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEpisodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEpisodeResponseValidationError) ErrorName() string {
	return "CreateEpisodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEpisodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEpisodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEpisodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEpisodeResponseValidationError{}

// Validate checks the field values on UpdateEpisodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateEpisodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEpisodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateEpisodeRequestMultiError, or nil if none found.
func (m *UpdateEpisodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEpisodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetEpisodeId()) < 1 {
		err := UpdateEpisodeRequestValidationError{
			field:  "EpisodeId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Metadata

	if m.Title != nil {
		// no validation rules for Title
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.DurationSeconds != nil {
		// no validation rules for DurationSeconds
	}

	if m.EpisodeNumber != nil {
		// no validation rules for EpisodeNumber
	}

	if m.SeasonNumber != nil {
		// no validation rules for SeasonNumber
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.MediaUrl != nil {
		// no validation rules for MediaUrl
	}

	if m.ThumbnailUrl != nil {
		// no validation rules for ThumbnailUrl
	}

	if m.ScheduledAt != nil {

		if all {
			switch v := interface{}(m.GetScheduledAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateEpisodeRequestValidationError{
						field:  "ScheduledAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateEpisodeRequestValidationError{
						field:  "ScheduledAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetScheduledAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateEpisodeRequestValidationError{
					field:  "ScheduledAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateEpisodeRequestMultiError(errors)
	}

	return nil
}

// UpdateEpisodeRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateEpisodeRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateEpisodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEpisodeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEpisodeRequestMultiError) AllErrors() []error { return m }

// UpdateEpisodeRequestValidationError is the validation error returned by
// UpdateEpisodeRequest.Validate if the designated constraints aren't met.
type UpdateEpisodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEpisodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEpisodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEpisodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEpisodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEpisodeRequestValidationError) ErrorName() string {
	return "UpdateEpisodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEpisodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEpisodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEpisodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEpisodeRequestValidationError{}

// Validate checks the field values on UpdateEpisodeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateEpisodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEpisodeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateEpisodeResponseMultiError, or nil if none found.
func (m *UpdateEpisodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEpisodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEpisode()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateEpisodeResponseValidationError{
					field:  "Episode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateEpisodeResponseValidationError{
					field:  "Episode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEpisode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateEpisodeResponseValidationError{
				field:  "Episode",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateEpisodeResponseMultiError(errors)
	}

	return nil
}

// UpdateEpisodeResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateEpisodeResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateEpisodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEpisodeResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEpisodeResponseMultiError) AllErrors() []error { return m }

// UpdateEpisodeResponseValidationError is the validation error returned by
// UpdateEpisodeResponse.Validate if the designated constraints aren't met.
type UpdateEpisodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEpisodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEpisodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEpisodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEpisodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEpisodeResponseValidationError) ErrorName() string {
	return "UpdateEpisodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEpisodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEpisodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEpisodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEpisodeResponseValidationError{}

// Validate checks the field values on DeleteEpisodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteEpisodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteEpisodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteEpisodeRequestMultiError, or nil if none found.
func (m *DeleteEpisodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteEpisodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetEpisodeId()) < 1 {
		err := DeleteEpisodeRequestValidationError{
			field:  "EpisodeId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteEpisodeRequestMultiError(errors)
	}

	return nil
}

// DeleteEpisodeRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteEpisodeRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteEpisodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteEpisodeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteEpisodeRequestMultiError) AllErrors() []error { return m }

// DeleteEpisodeRequestValidationError is the validation error returned by
// DeleteEpisodeRequest.Validate if the designated constraints aren't met.
type DeleteEpisodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEpisodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEpisodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEpisodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEpisodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEpisodeRequestValidationError) ErrorName() string {
	return "DeleteEpisodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEpisodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEpisodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEpisodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEpisodeRequestValidationError{}

// Validate checks the field values on GetEpisodeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetEpisodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEpisodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEpisodeRequestMultiError, or nil if none found.
func (m *GetEpisodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEpisodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetEpisodeId()) < 1 {
		err := GetEpisodeRequestValidationError{
			field:  "EpisodeId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetEpisodeRequestMultiError(errors)
	}

	return nil
}

// GetEpisodeRequestMultiError is an error wrapping multiple validation errors
// returned by GetEpisodeRequest.ValidateAll() if the designated constraints
// aren't met.
type GetEpisodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEpisodeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEpisodeRequestMultiError) AllErrors() []error { return m }

// GetEpisodeRequestValidationError is the validation error returned by
// GetEpisodeRequest.Validate if the designated constraints aren't met.
type GetEpisodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEpisodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEpisodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEpisodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEpisodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEpisodeRequestValidationError) ErrorName() string {
	return "GetEpisodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEpisodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEpisodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEpisodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEpisodeRequestValidationError{}

// Validate checks the field values on GetEpisodeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEpisodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEpisodeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEpisodeResponseMultiError, or nil if none found.
func (m *GetEpisodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEpisodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEpisode()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetEpisodeResponseValidationError{
					field:  "Episode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetEpisodeResponseValidationError{
					field:  "Episode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEpisode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetEpisodeResponseValidationError{
				field:  "Episode",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetEpisodeResponseMultiError(errors)
	}

	return nil
}

// GetEpisodeResponseMultiError is an error wrapping multiple validation errors
// returned by GetEpisodeResponse.ValidateAll() if the designated constraints
// aren't met.
type GetEpisodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEpisodeResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEpisodeResponseMultiError) AllErrors() []error { return m }

// GetEpisodeResponseValidationError is the validation error returned by
// GetEpisodeResponse.Validate if the designated constraints aren't met.
type GetEpisodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEpisodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEpisodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEpisodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEpisodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEpisodeResponseValidationError) ErrorName() string {
	return "GetEpisodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetEpisodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEpisodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEpisodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEpisodeResponseValidationError{}

// Validate checks the field values on ListEpisodesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListEpisodesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEpisodesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListEpisodesRequestMultiError, or nil if none found.
func (m *ListEpisodesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEpisodesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetProgramId()) < 1 {
		err := ListEpisodesRequestValidationError{
			field:  "ProgramId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Page

	if m.GetPageSize() > 100 {
		err := ListEpisodesRequestValidationError{
			field:  "PageSize",
			reason: "value must be less than or equal to 100",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	// no validation rules for SearchQuery

	// no validation rules for SeasonNumber

	// no validation rules for SortBy

	// no validation rules for SortOrder

	if len(errors) > 0 {
		return ListEpisodesRequestMultiError(errors)
	}

	return nil
}

// ListEpisodesRequestMultiError is an error wrapping multiple validation
// errors returned by ListEpisodesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListEpisodesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEpisodesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEpisodesRequestMultiError) AllErrors() []error { return m }

// ListEpisodesRequestValidationError is the validation error returned by
// ListEpisodesRequest.Validate if the designated constraints aren't met.
type ListEpisodesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEpisodesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEpisodesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEpisodesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEpisodesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEpisodesRequestValidationError) ErrorName() string {
	return "ListEpisodesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEpisodesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEpisodesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEpisodesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEpisodesRequestValidationError{}

// Validate checks the field values on ListEpisodesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListEpisodesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEpisodesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListEpisodesResponseMultiError, or nil if none found.
func (m *ListEpisodesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEpisodesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEpisodes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListEpisodesResponseValidationError{
						field:  fmt.Sprintf("Episodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListEpisodesResponseValidationError{
						field:  fmt.Sprintf("Episodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListEpisodesResponseValidationError{
					field:  fmt.Sprintf("Episodes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalCount

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListEpisodesResponseMultiError(errors)
	}

	return nil
}

// ListEpisodesResponseMultiError is an error wrapping multiple validation
// errors returned by ListEpisodesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListEpisodesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEpisodesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEpisodesResponseMultiError) AllErrors() []error { return m }

// ListEpisodesResponseValidationError is the validation error returned by
// ListEpisodesResponse.Validate if the designated constraints aren't met.
type ListEpisodesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEpisodesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEpisodesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEpisodesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEpisodesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEpisodesResponseValidationError) ErrorName() string {
	return "ListEpisodesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListEpisodesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEpisodesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEpisodesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEpisodesResponseValidationError{}

// Validate checks the field values on ImportDataRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ImportDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportDataRequestMultiError, or nil if none found.
func (m *ImportDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetSourceType()) < 1 {
		err := ImportDataRequestValidationError{
			field:  "SourceType",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for SourceUrl

	// no validation rules for SourceConfig

	// no validation rules for DefaultCategoryId

	// no validation rules for DryRun

	// no validation rules for FieldMapping

	if len(errors) > 0 {
		return ImportDataRequestMultiError(errors)
	}

	return nil
}

// ImportDataRequestMultiError is an error wrapping multiple validation errors
// returned by ImportDataRequest.ValidateAll() if the designated constraints
// aren't met.
type ImportDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportDataRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportDataRequestMultiError) AllErrors() []error { return m }

// ImportDataRequestValidationError is the validation error returned by
// ImportDataRequest.Validate if the designated constraints aren't met.
type ImportDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportDataRequestValidationError) ErrorName() string {
	return "ImportDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ImportDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportDataRequestValidationError{}

// Validate checks the field values on ImportDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImportDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportDataResponseMultiError, or nil if none found.
func (m *ImportDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ImportId

	// no validation rules for Status

	// no validation rules for Message

	// no validation rules for TotalItems

	// no validation rules for ProcessedItems

	// no validation rules for SuccessCount

	// no validation rules for ErrorCount

	if len(errors) > 0 {
		return ImportDataResponseMultiError(errors)
	}

	return nil
}

// ImportDataResponseMultiError is an error wrapping multiple validation errors
// returned by ImportDataResponse.ValidateAll() if the designated constraints
// aren't met.
type ImportDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportDataResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportDataResponseMultiError) AllErrors() []error { return m }

// ImportDataResponseValidationError is the validation error returned by
// ImportDataResponse.Validate if the designated constraints aren't met.
type ImportDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportDataResponseValidationError) ErrorName() string {
	return "ImportDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ImportDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportDataResponseValidationError{}

// Validate checks the field values on BulkUpdateProgramsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BulkUpdateProgramsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BulkUpdateProgramsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BulkUpdateProgramsRequestMultiError, or nil if none found.
func (m *BulkUpdateProgramsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BulkUpdateProgramsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetProgramIds()) < 1 {
		err := BulkUpdateProgramsRequestValidationError{
			field:  "ProgramIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	// no validation rules for CategoryId

	// no validation rules for Metadata

	// no validation rules for IsFeatured

	if len(errors) > 0 {
		return BulkUpdateProgramsRequestMultiError(errors)
	}

	return nil
}

// BulkUpdateProgramsRequestMultiError is an error wrapping multiple validation
// errors returned by BulkUpdateProgramsRequest.ValidateAll() if the
// designated constraints aren't met.
type BulkUpdateProgramsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BulkUpdateProgramsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BulkUpdateProgramsRequestMultiError) AllErrors() []error { return m }

// BulkUpdateProgramsRequestValidationError is the validation error returned by
// BulkUpdateProgramsRequest.Validate if the designated constraints aren't met.
type BulkUpdateProgramsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BulkUpdateProgramsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BulkUpdateProgramsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BulkUpdateProgramsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BulkUpdateProgramsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BulkUpdateProgramsRequestValidationError) ErrorName() string {
	return "BulkUpdateProgramsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BulkUpdateProgramsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBulkUpdateProgramsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BulkUpdateProgramsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BulkUpdateProgramsRequestValidationError{}

// Validate checks the field values on BulkUpdateProgramsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BulkUpdateProgramsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BulkUpdateProgramsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BulkUpdateProgramsResponseMultiError, or nil if none found.
func (m *BulkUpdateProgramsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BulkUpdateProgramsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UpdatedCount

	// no validation rules for FailedCount

	if len(errors) > 0 {
		return BulkUpdateProgramsResponseMultiError(errors)
	}

	return nil
}

// BulkUpdateProgramsResponseMultiError is an error wrapping multiple
// validation errors returned by BulkUpdateProgramsResponse.ValidateAll() if
// the designated constraints aren't met.
type BulkUpdateProgramsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BulkUpdateProgramsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BulkUpdateProgramsResponseMultiError) AllErrors() []error { return m }

// BulkUpdateProgramsResponseValidationError is the validation error returned
// by BulkUpdateProgramsResponse.Validate if the designated constraints aren't met.
type BulkUpdateProgramsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BulkUpdateProgramsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BulkUpdateProgramsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BulkUpdateProgramsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BulkUpdateProgramsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BulkUpdateProgramsResponseValidationError) ErrorName() string {
	return "BulkUpdateProgramsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BulkUpdateProgramsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBulkUpdateProgramsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BulkUpdateProgramsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BulkUpdateProgramsResponseValidationError{}

// Validate checks the field values on BulkDeleteProgramsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BulkDeleteProgramsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BulkDeleteProgramsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BulkDeleteProgramsRequestMultiError, or nil if none found.
func (m *BulkDeleteProgramsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BulkDeleteProgramsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetProgramIds()) < 1 {
		err := BulkDeleteProgramsRequestValidationError{
			field:  "ProgramIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return BulkDeleteProgramsRequestMultiError(errors)
	}

	return nil
}

// BulkDeleteProgramsRequestMultiError is an error wrapping multiple validation
// errors returned by BulkDeleteProgramsRequest.ValidateAll() if the
// designated constraints aren't met.
type BulkDeleteProgramsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BulkDeleteProgramsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BulkDeleteProgramsRequestMultiError) AllErrors() []error { return m }

// BulkDeleteProgramsRequestValidationError is the validation error returned by
// BulkDeleteProgramsRequest.Validate if the designated constraints aren't met.
type BulkDeleteProgramsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BulkDeleteProgramsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BulkDeleteProgramsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BulkDeleteProgramsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BulkDeleteProgramsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BulkDeleteProgramsRequestValidationError) ErrorName() string {
	return "BulkDeleteProgramsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BulkDeleteProgramsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBulkDeleteProgramsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BulkDeleteProgramsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BulkDeleteProgramsRequestValidationError{}

// Validate checks the field values on PaginationMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PaginationMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaginationMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PaginationMetadataMultiError, or nil if none found.
func (m *PaginationMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *PaginationMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for TotalCount

	// no validation rules for TotalPages

	if len(errors) > 0 {
		return PaginationMetadataMultiError(errors)
	}

	return nil
}

// PaginationMetadataMultiError is an error wrapping multiple validation errors
// returned by PaginationMetadata.ValidateAll() if the designated constraints
// aren't met.
type PaginationMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaginationMetadataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaginationMetadataMultiError) AllErrors() []error { return m }

// PaginationMetadataValidationError is the validation error returned by
// PaginationMetadata.Validate if the designated constraints aren't met.
type PaginationMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaginationMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaginationMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaginationMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaginationMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaginationMetadataValidationError) ErrorName() string {
	return "PaginationMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e PaginationMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaginationMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaginationMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaginationMetadataValidationError{}

// Validate checks the field values on SortOptions with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SortOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SortOptions with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SortOptionsMultiError, or
// nil if none found.
func (m *SortOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *SortOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Field

	// no validation rules for Direction

	if len(errors) > 0 {
		return SortOptionsMultiError(errors)
	}

	return nil
}

// SortOptionsMultiError is an error wrapping multiple validation errors
// returned by SortOptions.ValidateAll() if the designated constraints aren't met.
type SortOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SortOptionsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SortOptionsMultiError) AllErrors() []error { return m }

// SortOptionsValidationError is the validation error returned by
// SortOptions.Validate if the designated constraints aren't met.
type SortOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SortOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SortOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SortOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SortOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SortOptionsValidationError) ErrorName() string { return "SortOptionsValidationError" }

// Error satisfies the builtin error interface
func (e SortOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSortOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SortOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SortOptionsValidationError{}

// Validate checks the field values on FilterOptions with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FilterOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilterOptions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FilterOptionsMultiError, or
// nil if none found.
func (m *FilterOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *FilterOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetFilters()))
		i := 0
		for key := range m.GetFilters() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetFilters()[key]
			_ = val

			// no validation rules for Filters[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, FilterOptionsValidationError{
							field:  fmt.Sprintf("Filters[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, FilterOptionsValidationError{
							field:  fmt.Sprintf("Filters[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return FilterOptionsValidationError{
						field:  fmt.Sprintf("Filters[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return FilterOptionsMultiError(errors)
	}

	return nil
}

// FilterOptionsMultiError is an error wrapping multiple validation errors
// returned by FilterOptions.ValidateAll() if the designated constraints
// aren't met.
type FilterOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilterOptionsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilterOptionsMultiError) AllErrors() []error { return m }

// FilterOptionsValidationError is the validation error returned by
// FilterOptions.Validate if the designated constraints aren't met.
type FilterOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilterOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilterOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilterOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilterOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilterOptionsValidationError) ErrorName() string { return "FilterOptionsValidationError" }

// Error satisfies the builtin error interface
func (e FilterOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilterOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilterOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilterOptionsValidationError{}

// Validate checks the field values on EpisodeFileUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EpisodeFileUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EpisodeFileUpdateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EpisodeFileUpdateResponseMultiError, or nil if none found.
func (m *EpisodeFileUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EpisodeFileUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FileUrl

	if len(errors) > 0 {
		return EpisodeFileUpdateResponseMultiError(errors)
	}

	return nil
}

// EpisodeFileUpdateResponseMultiError is an error wrapping multiple validation
// errors returned by EpisodeFileUpdateResponse.ValidateAll() if the
// designated constraints aren't met.
type EpisodeFileUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EpisodeFileUpdateResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EpisodeFileUpdateResponseMultiError) AllErrors() []error { return m }

// EpisodeFileUpdateResponseValidationError is the validation error returned by
// EpisodeFileUpdateResponse.Validate if the designated constraints aren't met.
type EpisodeFileUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EpisodeFileUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EpisodeFileUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EpisodeFileUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EpisodeFileUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EpisodeFileUpdateResponseValidationError) ErrorName() string {
	return "EpisodeFileUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EpisodeFileUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEpisodeFileUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EpisodeFileUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EpisodeFileUpdateResponseValidationError{}
