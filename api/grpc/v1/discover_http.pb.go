// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v3.12.4
// source: v1/discover.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationDiscoverServiceFeatured = "/thmanyah.v1.DiscoverService/Featured"
const OperationDiscoverServiceSearch = "/thmanyah.v1.DiscoverService/Search"

type DiscoverServiceHTTPServer interface {
	Featured(context.Context, *FeaturedRequest) (*FeaturedResponse, error)
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
}

func RegisterDiscoverServiceHTTPServer(s *http.Server, srv DiscoverServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/discover/featured", _DiscoverService_Featured0_HTTP_Handler(srv))
	r.POST("/api/v1/discover/search", _DiscoverService_Search0_HTTP_Handler(srv))
}

func _DiscoverService_Featured0_HTTP_Handler(srv DiscoverServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FeaturedRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDiscoverServiceFeatured)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Featured(ctx, req.(*FeaturedRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FeaturedResponse)
		return ctx.Result(200, reply)
	}
}

func _DiscoverService_Search0_HTTP_Handler(srv DiscoverServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SearchRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDiscoverServiceSearch)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Search(ctx, req.(*SearchRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SearchResponse)
		return ctx.Result(200, reply)
	}
}

type DiscoverServiceHTTPClient interface {
	Featured(ctx context.Context, req *FeaturedRequest, opts ...http.CallOption) (rsp *FeaturedResponse, err error)
	Search(ctx context.Context, req *SearchRequest, opts ...http.CallOption) (rsp *SearchResponse, err error)
}

type DiscoverServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewDiscoverServiceHTTPClient(client *http.Client) DiscoverServiceHTTPClient {
	return &DiscoverServiceHTTPClientImpl{client}
}

func (c *DiscoverServiceHTTPClientImpl) Featured(ctx context.Context, in *FeaturedRequest, opts ...http.CallOption) (*FeaturedResponse, error) {
	var out FeaturedResponse
	pattern := "/api/v1/discover/featured"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDiscoverServiceFeatured))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DiscoverServiceHTTPClientImpl) Search(ctx context.Context, in *SearchRequest, opts ...http.CallOption) (*SearchResponse, error) {
	var out SearchResponse
	pattern := "/api/v1/discover/search"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDiscoverServiceSearch))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
