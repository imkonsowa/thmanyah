// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v3.12.4
// source: v1/cms.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCmsServiceBulkDeletePrograms = "/thmanyah.v1.CmsService/BulkDeletePrograms"
const OperationCmsServiceBulkUpdatePrograms = "/thmanyah.v1.CmsService/BulkUpdatePrograms"
const OperationCmsServiceCreateCategory = "/thmanyah.v1.CmsService/CreateCategory"
const OperationCmsServiceCreateEpisode = "/thmanyah.v1.CmsService/CreateEpisode"
const OperationCmsServiceCreateProgram = "/thmanyah.v1.CmsService/CreateProgram"
const OperationCmsServiceDeleteCategory = "/thmanyah.v1.CmsService/DeleteCategory"
const OperationCmsServiceDeleteEpisode = "/thmanyah.v1.CmsService/DeleteEpisode"
const OperationCmsServiceDeleteProgram = "/thmanyah.v1.CmsService/DeleteProgram"
const OperationCmsServiceGetCategory = "/thmanyah.v1.CmsService/GetCategory"
const OperationCmsServiceGetEpisode = "/thmanyah.v1.CmsService/GetEpisode"
const OperationCmsServiceGetProgram = "/thmanyah.v1.CmsService/GetProgram"
const OperationCmsServiceImportData = "/thmanyah.v1.CmsService/ImportData"
const OperationCmsServiceListCategories = "/thmanyah.v1.CmsService/ListCategories"
const OperationCmsServiceListEpisodes = "/thmanyah.v1.CmsService/ListEpisodes"
const OperationCmsServiceListPrograms = "/thmanyah.v1.CmsService/ListPrograms"
const OperationCmsServiceUpdateCategory = "/thmanyah.v1.CmsService/UpdateCategory"
const OperationCmsServiceUpdateEpisode = "/thmanyah.v1.CmsService/UpdateEpisode"
const OperationCmsServiceUpdateProgram = "/thmanyah.v1.CmsService/UpdateProgram"

type CmsServiceHTTPServer interface {
	BulkDeletePrograms(context.Context, *BulkDeleteProgramsRequest) (*emptypb.Empty, error)
	BulkUpdatePrograms(context.Context, *BulkUpdateProgramsRequest) (*BulkUpdateProgramsResponse, error)
	CreateCategory(context.Context, *CreateCategoryRequest) (*CreateCategoryResponse, error)
	CreateEpisode(context.Context, *CreateEpisodeRequest) (*CreateEpisodeResponse, error)
	CreateProgram(context.Context, *CreateProgramRequest) (*CreateProgramResponse, error)
	DeleteCategory(context.Context, *DeleteCategoryRequest) (*emptypb.Empty, error)
	DeleteEpisode(context.Context, *DeleteEpisodeRequest) (*emptypb.Empty, error)
	DeleteProgram(context.Context, *DeleteProgramRequest) (*emptypb.Empty, error)
	GetCategory(context.Context, *GetCategoryRequest) (*GetCategoryResponse, error)
	GetEpisode(context.Context, *GetEpisodeRequest) (*GetEpisodeResponse, error)
	GetProgram(context.Context, *GetProgramRequest) (*GetProgramResponse, error)
	ImportData(context.Context, *ImportDataRequest) (*ImportDataResponse, error)
	ListCategories(context.Context, *ListCategoriesRequest) (*ListCategoriesResponse, error)
	ListEpisodes(context.Context, *ListEpisodesRequest) (*ListEpisodesResponse, error)
	ListPrograms(context.Context, *ListProgramsRequest) (*ListProgramsResponse, error)
	UpdateCategory(context.Context, *UpdateCategoryRequest) (*UpdateCategoryResponse, error)
	UpdateEpisode(context.Context, *UpdateEpisodeRequest) (*UpdateEpisodeResponse, error)
	UpdateProgram(context.Context, *UpdateProgramRequest) (*UpdateProgramResponse, error)
}

func RegisterCmsServiceHTTPServer(s *http.Server, srv CmsServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/cms/programs", _CmsService_CreateProgram0_HTTP_Handler(srv))
	r.PUT("/api/v1/cms/programs/{program_id}", _CmsService_UpdateProgram0_HTTP_Handler(srv))
	r.DELETE("/api/v1/cms/programs/{program_id}", _CmsService_DeleteProgram0_HTTP_Handler(srv))
	r.GET("/api/v1/cms/programs/{program_id}", _CmsService_GetProgram0_HTTP_Handler(srv))
	r.GET("/api/v1/cms/programs", _CmsService_ListPrograms0_HTTP_Handler(srv))
	r.POST("/api/v1/cms/categories", _CmsService_CreateCategory0_HTTP_Handler(srv))
	r.PUT("/api/v1/cms/categories/{category_id}", _CmsService_UpdateCategory0_HTTP_Handler(srv))
	r.DELETE("/api/v1/cms/categories/{category_id}", _CmsService_DeleteCategory0_HTTP_Handler(srv))
	r.GET("/api/v1/cms/categories/{category_id}", _CmsService_GetCategory0_HTTP_Handler(srv))
	r.GET("/api/v1/cms/categories", _CmsService_ListCategories0_HTTP_Handler(srv))
	r.POST("/api/v1/cms/episodes", _CmsService_CreateEpisode0_HTTP_Handler(srv))
	r.PUT("/api/v1/cms/episodes/{episode_id}", _CmsService_UpdateEpisode0_HTTP_Handler(srv))
	r.DELETE("/api/v1/cms/episodes/{episode_id}", _CmsService_DeleteEpisode0_HTTP_Handler(srv))
	r.GET("/api/v1/cms/episodes/{episode_id}", _CmsService_GetEpisode0_HTTP_Handler(srv))
	r.GET("/api/v1/cms/programs/{program_id}/episodes", _CmsService_ListEpisodes0_HTTP_Handler(srv))
	r.POST("/api/v1/cms/import", _CmsService_ImportData0_HTTP_Handler(srv))
	r.POST("/api/v1/cms/programs/bulk-update", _CmsService_BulkUpdatePrograms0_HTTP_Handler(srv))
	r.POST("/api/v1/cms/programs/bulk-delete", _CmsService_BulkDeletePrograms0_HTTP_Handler(srv))
}

func _CmsService_CreateProgram0_HTTP_Handler(srv CmsServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateProgramRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCmsServiceCreateProgram)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateProgram(ctx, req.(*CreateProgramRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateProgramResponse)
		return ctx.Result(200, reply)
	}
}

func _CmsService_UpdateProgram0_HTTP_Handler(srv CmsServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateProgramRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCmsServiceUpdateProgram)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateProgram(ctx, req.(*UpdateProgramRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateProgramResponse)
		return ctx.Result(200, reply)
	}
}

func _CmsService_DeleteProgram0_HTTP_Handler(srv CmsServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteProgramRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCmsServiceDeleteProgram)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteProgram(ctx, req.(*DeleteProgramRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _CmsService_GetProgram0_HTTP_Handler(srv CmsServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetProgramRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCmsServiceGetProgram)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetProgram(ctx, req.(*GetProgramRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetProgramResponse)
		return ctx.Result(200, reply)
	}
}

func _CmsService_ListPrograms0_HTTP_Handler(srv CmsServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListProgramsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCmsServiceListPrograms)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListPrograms(ctx, req.(*ListProgramsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListProgramsResponse)
		return ctx.Result(200, reply)
	}
}

func _CmsService_CreateCategory0_HTTP_Handler(srv CmsServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateCategoryRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCmsServiceCreateCategory)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCategory(ctx, req.(*CreateCategoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateCategoryResponse)
		return ctx.Result(200, reply)
	}
}

func _CmsService_UpdateCategory0_HTTP_Handler(srv CmsServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateCategoryRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCmsServiceUpdateCategory)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateCategory(ctx, req.(*UpdateCategoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateCategoryResponse)
		return ctx.Result(200, reply)
	}
}

func _CmsService_DeleteCategory0_HTTP_Handler(srv CmsServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteCategoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCmsServiceDeleteCategory)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteCategory(ctx, req.(*DeleteCategoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _CmsService_GetCategory0_HTTP_Handler(srv CmsServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCategoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCmsServiceGetCategory)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCategory(ctx, req.(*GetCategoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCategoryResponse)
		return ctx.Result(200, reply)
	}
}

func _CmsService_ListCategories0_HTTP_Handler(srv CmsServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCategoriesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCmsServiceListCategories)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCategories(ctx, req.(*ListCategoriesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListCategoriesResponse)
		return ctx.Result(200, reply)
	}
}

func _CmsService_CreateEpisode0_HTTP_Handler(srv CmsServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateEpisodeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCmsServiceCreateEpisode)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateEpisode(ctx, req.(*CreateEpisodeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateEpisodeResponse)
		return ctx.Result(200, reply)
	}
}

func _CmsService_UpdateEpisode0_HTTP_Handler(srv CmsServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateEpisodeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCmsServiceUpdateEpisode)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateEpisode(ctx, req.(*UpdateEpisodeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateEpisodeResponse)
		return ctx.Result(200, reply)
	}
}

func _CmsService_DeleteEpisode0_HTTP_Handler(srv CmsServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteEpisodeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCmsServiceDeleteEpisode)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteEpisode(ctx, req.(*DeleteEpisodeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _CmsService_GetEpisode0_HTTP_Handler(srv CmsServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetEpisodeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCmsServiceGetEpisode)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetEpisode(ctx, req.(*GetEpisodeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetEpisodeResponse)
		return ctx.Result(200, reply)
	}
}

func _CmsService_ListEpisodes0_HTTP_Handler(srv CmsServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListEpisodesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCmsServiceListEpisodes)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListEpisodes(ctx, req.(*ListEpisodesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListEpisodesResponse)
		return ctx.Result(200, reply)
	}
}

func _CmsService_ImportData0_HTTP_Handler(srv CmsServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ImportDataRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCmsServiceImportData)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ImportData(ctx, req.(*ImportDataRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ImportDataResponse)
		return ctx.Result(200, reply)
	}
}

func _CmsService_BulkUpdatePrograms0_HTTP_Handler(srv CmsServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BulkUpdateProgramsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCmsServiceBulkUpdatePrograms)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BulkUpdatePrograms(ctx, req.(*BulkUpdateProgramsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BulkUpdateProgramsResponse)
		return ctx.Result(200, reply)
	}
}

func _CmsService_BulkDeletePrograms0_HTTP_Handler(srv CmsServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BulkDeleteProgramsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCmsServiceBulkDeletePrograms)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BulkDeletePrograms(ctx, req.(*BulkDeleteProgramsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type CmsServiceHTTPClient interface {
	BulkDeletePrograms(ctx context.Context, req *BulkDeleteProgramsRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	BulkUpdatePrograms(ctx context.Context, req *BulkUpdateProgramsRequest, opts ...http.CallOption) (rsp *BulkUpdateProgramsResponse, err error)
	CreateCategory(ctx context.Context, req *CreateCategoryRequest, opts ...http.CallOption) (rsp *CreateCategoryResponse, err error)
	CreateEpisode(ctx context.Context, req *CreateEpisodeRequest, opts ...http.CallOption) (rsp *CreateEpisodeResponse, err error)
	CreateProgram(ctx context.Context, req *CreateProgramRequest, opts ...http.CallOption) (rsp *CreateProgramResponse, err error)
	DeleteCategory(ctx context.Context, req *DeleteCategoryRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteEpisode(ctx context.Context, req *DeleteEpisodeRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteProgram(ctx context.Context, req *DeleteProgramRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetCategory(ctx context.Context, req *GetCategoryRequest, opts ...http.CallOption) (rsp *GetCategoryResponse, err error)
	GetEpisode(ctx context.Context, req *GetEpisodeRequest, opts ...http.CallOption) (rsp *GetEpisodeResponse, err error)
	GetProgram(ctx context.Context, req *GetProgramRequest, opts ...http.CallOption) (rsp *GetProgramResponse, err error)
	ImportData(ctx context.Context, req *ImportDataRequest, opts ...http.CallOption) (rsp *ImportDataResponse, err error)
	ListCategories(ctx context.Context, req *ListCategoriesRequest, opts ...http.CallOption) (rsp *ListCategoriesResponse, err error)
	ListEpisodes(ctx context.Context, req *ListEpisodesRequest, opts ...http.CallOption) (rsp *ListEpisodesResponse, err error)
	ListPrograms(ctx context.Context, req *ListProgramsRequest, opts ...http.CallOption) (rsp *ListProgramsResponse, err error)
	UpdateCategory(ctx context.Context, req *UpdateCategoryRequest, opts ...http.CallOption) (rsp *UpdateCategoryResponse, err error)
	UpdateEpisode(ctx context.Context, req *UpdateEpisodeRequest, opts ...http.CallOption) (rsp *UpdateEpisodeResponse, err error)
	UpdateProgram(ctx context.Context, req *UpdateProgramRequest, opts ...http.CallOption) (rsp *UpdateProgramResponse, err error)
}

type CmsServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewCmsServiceHTTPClient(client *http.Client) CmsServiceHTTPClient {
	return &CmsServiceHTTPClientImpl{client}
}

func (c *CmsServiceHTTPClientImpl) BulkDeletePrograms(ctx context.Context, in *BulkDeleteProgramsRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/api/v1/cms/programs/bulk-delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCmsServiceBulkDeletePrograms))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CmsServiceHTTPClientImpl) BulkUpdatePrograms(ctx context.Context, in *BulkUpdateProgramsRequest, opts ...http.CallOption) (*BulkUpdateProgramsResponse, error) {
	var out BulkUpdateProgramsResponse
	pattern := "/api/v1/cms/programs/bulk-update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCmsServiceBulkUpdatePrograms))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CmsServiceHTTPClientImpl) CreateCategory(ctx context.Context, in *CreateCategoryRequest, opts ...http.CallOption) (*CreateCategoryResponse, error) {
	var out CreateCategoryResponse
	pattern := "/api/v1/cms/categories"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCmsServiceCreateCategory))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CmsServiceHTTPClientImpl) CreateEpisode(ctx context.Context, in *CreateEpisodeRequest, opts ...http.CallOption) (*CreateEpisodeResponse, error) {
	var out CreateEpisodeResponse
	pattern := "/api/v1/cms/episodes"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCmsServiceCreateEpisode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CmsServiceHTTPClientImpl) CreateProgram(ctx context.Context, in *CreateProgramRequest, opts ...http.CallOption) (*CreateProgramResponse, error) {
	var out CreateProgramResponse
	pattern := "/api/v1/cms/programs"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCmsServiceCreateProgram))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CmsServiceHTTPClientImpl) DeleteCategory(ctx context.Context, in *DeleteCategoryRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/api/v1/cms/categories/{category_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCmsServiceDeleteCategory))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CmsServiceHTTPClientImpl) DeleteEpisode(ctx context.Context, in *DeleteEpisodeRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/api/v1/cms/episodes/{episode_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCmsServiceDeleteEpisode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CmsServiceHTTPClientImpl) DeleteProgram(ctx context.Context, in *DeleteProgramRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/api/v1/cms/programs/{program_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCmsServiceDeleteProgram))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CmsServiceHTTPClientImpl) GetCategory(ctx context.Context, in *GetCategoryRequest, opts ...http.CallOption) (*GetCategoryResponse, error) {
	var out GetCategoryResponse
	pattern := "/api/v1/cms/categories/{category_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCmsServiceGetCategory))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CmsServiceHTTPClientImpl) GetEpisode(ctx context.Context, in *GetEpisodeRequest, opts ...http.CallOption) (*GetEpisodeResponse, error) {
	var out GetEpisodeResponse
	pattern := "/api/v1/cms/episodes/{episode_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCmsServiceGetEpisode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CmsServiceHTTPClientImpl) GetProgram(ctx context.Context, in *GetProgramRequest, opts ...http.CallOption) (*GetProgramResponse, error) {
	var out GetProgramResponse
	pattern := "/api/v1/cms/programs/{program_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCmsServiceGetProgram))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CmsServiceHTTPClientImpl) ImportData(ctx context.Context, in *ImportDataRequest, opts ...http.CallOption) (*ImportDataResponse, error) {
	var out ImportDataResponse
	pattern := "/api/v1/cms/import"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCmsServiceImportData))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CmsServiceHTTPClientImpl) ListCategories(ctx context.Context, in *ListCategoriesRequest, opts ...http.CallOption) (*ListCategoriesResponse, error) {
	var out ListCategoriesResponse
	pattern := "/api/v1/cms/categories"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCmsServiceListCategories))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CmsServiceHTTPClientImpl) ListEpisodes(ctx context.Context, in *ListEpisodesRequest, opts ...http.CallOption) (*ListEpisodesResponse, error) {
	var out ListEpisodesResponse
	pattern := "/api/v1/cms/programs/{program_id}/episodes"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCmsServiceListEpisodes))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CmsServiceHTTPClientImpl) ListPrograms(ctx context.Context, in *ListProgramsRequest, opts ...http.CallOption) (*ListProgramsResponse, error) {
	var out ListProgramsResponse
	pattern := "/api/v1/cms/programs"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCmsServiceListPrograms))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CmsServiceHTTPClientImpl) UpdateCategory(ctx context.Context, in *UpdateCategoryRequest, opts ...http.CallOption) (*UpdateCategoryResponse, error) {
	var out UpdateCategoryResponse
	pattern := "/api/v1/cms/categories/{category_id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCmsServiceUpdateCategory))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CmsServiceHTTPClientImpl) UpdateEpisode(ctx context.Context, in *UpdateEpisodeRequest, opts ...http.CallOption) (*UpdateEpisodeResponse, error) {
	var out UpdateEpisodeResponse
	pattern := "/api/v1/cms/episodes/{episode_id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCmsServiceUpdateEpisode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CmsServiceHTTPClientImpl) UpdateProgram(ctx context.Context, in *UpdateProgramRequest, opts ...http.CallOption) (*UpdateProgramResponse, error) {
	var out UpdateProgramResponse
	pattern := "/api/v1/cms/programs/{program_id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCmsServiceUpdateProgram))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
