// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"thmanyah/internal/conf"
	"thmanyah/internal/modules/cms/biz"
	"thmanyah/internal/modules/cms/data/repo"
	"thmanyah/internal/modules/cms/data/s3"
	"thmanyah/internal/modules/cms/service"
	biz2 "thmanyah/internal/modules/discover/biz"
	repo2 "thmanyah/internal/modules/discover/data"
	"thmanyah/internal/modules/discover/data/cache"
	service2 "thmanyah/internal/modules/discover/service"
	"thmanyah/internal/postgres"
	"thmanyah/internal/server"
	"thmanyah/keys"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

func wireApp(contextContext context.Context, logger log.Logger, confServer *conf.Server, data *conf.Data) (*kratos.App, error) {
	pool, err := postgres.NewPgPool(contextContext, data)
	if err != nil {
		return nil, err
	}
	usersRepository, err := repo.NewUsersRepo(pool, logger)
	if err != nil {
		return nil, err
	}
	categoryRepository := repo.NewCategoryRepository(pool)
	programRepository := repo.NewProgramRepository(pool)
	episodeRepository := repo.NewEpisodeRepository(pool)
	importRepository := repo.NewImportRepository(pool)
	store := keys.NewKeyStore()
	s3Client, err := s3.NewS3Client(contextContext, data)
	if err != nil {
		return nil, err
	}
	useCase := biz.NewUseCase(usersRepository, categoryRepository, programRepository, episodeRepository, importRepository, store, s3Client, logger)
	authService := service.NewAuthService(useCase)
	cmsService := service.NewCmsService(useCase)
	discoverRepository, err := repo2.NewDiscoverRepo(pool, logger)
	if err != nil {
		return nil, err
	}
	memoryCache, err := cache.NewMemoryCache()
	if err != nil {
		return nil, err
	}
	discoverUsecase := biz2.NewDiscoverUsecase(discoverRepository, memoryCache, logger)
	discoverService := service2.NewDiscoverService(discoverUsecase, logger)
	grpcServer := server.NewGRPCServer(confServer, authService, cmsService, discoverService, logger)
	httpServer := server.NewHTTPServer(confServer, store, authService, cmsService, discoverService, logger)
	app := newApp(contextContext, logger, grpcServer, httpServer)
	return app, nil
}
